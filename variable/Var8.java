package variable;
// <변수 타입2> 섹션 2 강의 5
// 정수
// byte b = 127
// short s= 32767
// int i = 20억까지 쓸 수 있다.
// long l = long이 제일 긴 정수를 넣을 수 있다. 뒤에 대문자 L을 넣어줘야 한다.
// 정수는 크게 4가지가 있다. 높을 수록 메모리를 많이 차지한다.대부분 int를 쓴다

// 실수 2가지
// float f = 10.0f
// double d = 10.0 double이 더큰 실수의 범위를 사용
// 메모리를 작게 사용하면, 작은 숫자를 표현할 수 있고, 메모리를 많이 사용하면 큰 숫자를 사용할 수 있다.
// 변수를 선언하면 이 표현 범위에 따라서 메모리 공간을 차지하는 범위가 다르다.

// String: 문자열을 표현한다. 메모리 사용량은 문자 길이에 따라 동적으로 달라진다.

// 리터럴 타입 지정
// 정수 리터럴은 int을 기본으로 사용한다. 따라서 int 범위까지 표현할 수 있다.
// 정수리터럴은 byte에 127, short 32767 int 약 20억
// 정수리터럴은 int 범위까지 표현할 수 있다.
// 그래서 숫자가 int 범위을 넘어서면 뒤에 L을 붙여서 정수리터럴을 long으로 변경해야 한다.
// 실수 리터럴은 기본이 double형을 사용한다. float형을 사용하려면 f를 붙여서 float형으로 지정해야 한다.
// float은 표현 범위가 작다.
// double은 더 큰 표현 범위를 표현한다.
// 소수점 계산에 오류를 굉장히 많이 발생한다. float을 쓰면

// 변수타입 정리 여기가 중요
// 이렇게 많은 변수가 있는데 실제로 외우고 써야 하는가?
// 프로그래밍 강의에서는 절대 외우면 안 된다.
// 이해를 하고 넘어가야 한다.
// 필요 없는 것은 다 버려야 한다.
// 실무에서 안 쓰는 것은 가급적이면 버려야 한다.
// 진짜 중요한 거 뼈대를 쌓아서 올려가야지
// 다음 타입은 실무에서 거의 사용하지 않는다.
// byte 표현의 길이가 짧다. 또 자바가 4byte(int)를 효율적으로 계산하도록 설계되어 있다.
// int를 사용하자
// 메모리 용량을 약간 절약하기 보다는 개발 속도나 효율에 초점을 맞추는 것이 더 효과적이다.
// byte 타입을 직접 선언하고 여기에 숫자 값을 대입해서 계산하는 일은 거의 없다.
// 파일을 전송할 때는 byte 단위로 다룬다 그래서 파일을 전송이나 복사하는데 주로 사용합니다.
// short는 표현 길이가 너무 작다.
// float: 표현길이와 정밀도가 낮다.정밀도가 낮아서 위험해서 쓰면 안 된다. 실수형은 double을 써야 한다.
// 문자 하나를 표현하는 일은 거의 없다. 문자 하나를 표현할 때도 문자열을 사용할 수 있다.

// 자주 사용하는 타입
// 정수- int, long
// 실수 - double
// 불린형 - 참과 거짓을 표현할 때 쓴다.




public class Var8 {
    public static void main(String[] args){
        byte b = 127; // -128 ~ 127
        short s = 32767; // -32,768 ~ 32,767
        int i = 2147483647; // -2,147,483,648 ~ 2,147,483,647 (약 20억)

//  9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
        long l = 9223372036854775807L;

//      숫자가 클수록 메모리를 많이 차지한다

        float f = 10.0f;
        double d = 10.0; //double  더 큰 실수의 범위를 사용 float 보다

    }
}

// <변수 명명 규칙> 섹션 2 강의6
// 자바에서 변수의 이름을 짓는데는 규칙과 관례가 있다.
// 규칙은 필수이다. 규칙을 지키지 않으면 컴파일 오류가 발생한다
// 관례는 필수는 아니지만, 전 세계 개발자가 해당 관례를 따르기 때문에 사실상 규칙이라고 생각해도 된다

// ~: 영상을 보기



